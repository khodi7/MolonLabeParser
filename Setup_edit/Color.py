class Color:
    """A color defined in RGB
    
    Attributes:
        red1(int)
        green1(int)
        blue1(int)
        red2(int)
        green2(int)
        blue2(int)
    """
    
    def __init__(self):
        self.red1 = None
        self.green1 = None
        self.blue1 = None
        self.red2 = None
        self.green2 = None
        self.blue2 = None
    
    def from_csv(self, df_color):
        """Modifies self according to df_color.
        
        Args:
            csv_color_1(string): a string from the color column of a DataFrame
            generated by the create_diplomacy_data_file
            function in the parser module.
            Each color is defined using the rgb scale like this: rgb { R G B }
            R G and B are the values for the intensity of respectively, the red,
            the green and the blue in the color.
            0 <= R, G or B <= 255
        
        Returns:
            None
        """
        colors = []
        color1 = df_color.split("=")[0]
        color2 = df_color.split("=")[0]
        raw_colors = (color1, color2)
        # We extract the numbers between the brackets.
        for color in raw_colors:
            color = df_color.split("{")[1]
            color = df_color.split("}")[0]
            color = df_color.strip().split()
            for num in color:
                colors.append(int(num))
        color 
        self.red1 = colors[0]
        self.green1 = colors[1]
        self.blue1 = colors[2]
        self.red2 = colors[3]
        self.green2 = colors[4]
        self.blue2 = colors[5]
    
    def __str__(self):
        template = "color = rgb {} {} {} {} {}\ncolor2 = rgb {} {} {} {} {}\n"
        return template.format("{", self.red1, self.green1, self.blue1, "}",
                               "{", self.red2, self.green2, self.blue2, "}")